import React, { useState, useEffect } from 'react';
import { 
  Users, 
  Bed, 
  Key,
  DollarSign,
  AlertTriangle,
  X,
  Building2,
  Plus,
  Trash2,
  Home,
  MapPin
} from 'lucide-react';
import { useAppContext } from '../../context/AppContext';
import { useToast } from '../../context/ToastContext';
import { NavLink } from "react-router-dom";

// Confirmation Dialog Component
const ConfirmationDialog = ({ isOpen, onClose, onConfirm, unit }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center">
            <AlertTriangle className="w-6 h-6 text-yellow-500 mr-2" />
            <h3 className="text-lg font-semibold">Confirm Availability Change</h3>
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6">
          <p className="text-gray-700 mb-4">
            Are you sure you want to change the availability status for:
          </p>
          <div className="bg-gray-50 rounded-lg p-4 mb-4">
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div className="font-medium text-gray-600">Unit:</div>
              <div className="font-semibold">{unit?.unit_number}</div>
              
              <div className="font-medium text-gray-600">Type:</div>
              <div>{unit?.unit_type?.name || 'N/A'}</div>
              
              <div className="font-medium text-gray-600">Current Status:</div>
              <div>
                <span className={`px-2 py-1 text-xs rounded-full ${
                  unit?.is_available 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {unit?.is_available ? 'available' : 'occupied'}
                </span>
              </div>
              
              <div className="font-medium text-gray-600">New Status:</div>
              <div>
                <span className={`px-2 py-1 text-xs rounded-full ${
                  !unit?.is_available 
                    ? 'bg-green-100 text-green-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                  {!unit?.is_available ? 'available' : 'occupied'}
                </span>
              </div>
            </div>
          </div>
        </div>

        <div className="flex gap-3 p-6 border-t bg-gray-50">
          <button
            onClick={onClose}
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 font-medium"
          >
            Cancel
          </button>
          <button
            onClick={onConfirm}
            className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
          >
            Confirm Change
          </button>
        </div>
      </div>
    </div>
  );
};

// Add Unit Type Dialog
const AddUnitTypeDialog = ({ isOpen, onClose, onAdd }) => {
  const [unitType, setUnitType] = useState({ name: '', rent: '', deposit: '' });

  if (!isOpen) return null;

  const handleSubmit = () => {
    if (!unitType.name || !unitType.rent) {
      alert('Please fill in all required fields');
      return;
    }
    onAdd(unitType);
    setUnitType({ name: '', rent: '', deposit: '' });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div className="flex items-center justify-between p-6 border-b">
          <h3 className="text-lg font-semibold">Add Unit Type</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Unit Type Name <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={unitType.name}
              onChange={(e) => setUnitType({...unitType, name: e.target.value})}
              placeholder="e.g., Studio, 1 Bedroom, 2 Bedroom"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Monthly Rent (KSh) <span className="text-red-500">*</span>
            </label>
            <input
              type="number"
              value={unitType.rent}
              onChange={(e) => setUnitType({...unitType, rent: e.target.value})}
              placeholder="25000"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Deposit (KSh)
            </label>
            <input
              type="number"
              value={unitType.deposit}
              onChange={(e) => setUnitType({...unitType, deposit: e.target.value})}
              placeholder="25000"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="flex gap-3 p-6 border-t bg-gray-50">
          <button
            onClick={onClose}
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 font-medium"
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
          >
            Add Unit Type
          </button>
        </div>
      </div>
    </div>
  );
};

// Add Unit Dialog
const AddUnitDialog = ({ isOpen, onClose, onAdd, unitTypes, properties }) => {
  const [unitData, setUnitData] = useState({
    property_obj: '',
    unit_number: '',
    unit_type: '',
    bedrooms: '',
    bathrooms: '',
    floor: '',
    rent: '',
    deposit: ''
  });

  if (!isOpen) return null;

  const handleSubmit = async () => {
    if (!unitData.property_obj || !unitData.unit_number || !unitData.unit_type) {
      alert('Please fill in all required fields');
      return;
    }
    
    try {
      await onAdd(unitData);
      setUnitData({
        property_obj: '',
        unit_number: '',
        unit_type: '',
        bedrooms: '',
        bathrooms: '',
        floor: '',
        rent: '',
        deposit: ''
      });
    } catch (error) {
      // Error handling is done in the parent component
    }
  };

  const selectedUnitType = unitTypes.find(ut => ut.id === parseInt(unitData.unit_type));

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 border-b">
          <h3 className="text-lg font-semibold">Add Rental Unit</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Property <span className="text-red-500">*</span>
            </label>
            <select
              value={unitData.property_obj}
              onChange={(e) => setUnitData({...unitData, property_obj: e.target.value})}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Select property</option>
              {properties.map(property => (
                <option key={property.id} value={property.id}>
                  {property.name} - {property.city}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Unit Number <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              value={unitData.unit_number}
              onChange={(e) => setUnitData({...unitData, unit_number: e.target.value})}
              placeholder="e.g., A101, 201, G-01"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Unit Type <span className="text-red-500">*</span>
            </label>
            <select
              value={unitData.unit_type}
              onChange={(e) => {
                const selectedType = unitTypes.find(ut => ut.id === parseInt(e.target.value));
                setUnitData({
                  ...unitData, 
                  unit_type: e.target.value,
                  rent: selectedType ? selectedType.rent : unitData.rent,
                  deposit: selectedType ? selectedType.deposit : unitData.deposit
                });
              }}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Select unit type</option>
              {unitTypes.map(ut => (
                <option key={ut.id} value={ut.id}>{ut.name} - KSh {ut.rent}/month</option>
              ))}
            </select>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Bedrooms
              </label>
              <input
                type="number"
                value={unitData.bedrooms}
                onChange={(e) => setUnitData({...unitData, bedrooms: e.target.value})}
                placeholder="0"
                min="0"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Bathrooms
              </label>
              <input
                type="number"
                value={unitData.bathrooms}
                onChange={(e) => setUnitData({...unitData, bathrooms: e.target.value})}
                placeholder="0"
                min="0"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Floor
            </label>
            <input
              type="number"
              value={unitData.floor}
              onChange={(e) => setUnitData({...unitData, floor: e.target.value})}
              placeholder="e.g., 1, 2, 3"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Rent (KSh)
              </label>
              <input
                type="number"
                value={unitData.rent || selectedUnitType?.rent || ''}
                onChange={(e) => setUnitData({...unitData, rent: e.target.value})}
                placeholder="25000"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Deposit (KSh)
              </label>
              <input
                type="number"
                value={unitData.deposit || selectedUnitType?.deposit || ''}
                onChange={(e) => setUnitData({...unitData, deposit: e.target.value})}
                placeholder="25000"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        </div>

        <div className="flex gap-3 p-6 border-t bg-gray-50">
          <button
            onClick={onClose}
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 font-medium"
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
          >
            Add Unit
          </button>
        </div>
      </div>
    </div>
  );
};

const AdminOrganisation = () => {
  const { 
    units,
    unitsLoading,
    properties,
    propertiesLoading,
    tenants,
    reports,
    unitTypes,
    selectedPropertyId,
    setSelectedPropertyId,
    addUnit,
    updateUnitAvailability,
    refreshData
  } = useAppContext();
  
  const { showToast } = useToast();
  
  const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, unit: null });
  const [unitTypeDialog, setUnitTypeDialog] = useState(false);
  const [addUnitDialog, setAddUnitDialog] = useState(false);

  // Filter data by selected property
  const propertyUnits = selectedPropertyId 
    ? units.filter(unit => unit.property?.id === parseInt(selectedPropertyId))
    : units;

  const propertyTenants = selectedPropertyId
    ? tenants.filter(tenant => tenant.unit?.property?.id === parseInt(selectedPropertyId))
    : tenants;

  const propertyReports = selectedPropertyId
    ? reports.filter(report => report.unit?.property?.id === parseInt(selectedPropertyId))
    : reports;

  const currentProperty = properties.find(p => p.id === parseInt(selectedPropertyId));

  // Open confirmation dialog
  const openConfirmDialog = (unit) => {
    setConfirmDialog({ isOpen: true, unit: unit });
  };

  const closeConfirmDialog = () => {
    setConfirmDialog({ isOpen: false, unit: null });
  };

  // Toggle unit availability with confirmation
  const handleConfirmToggle = async () => {
    const unitToUpdate = confirmDialog.unit;
    
    try {
      await updateUnitAvailability(unitToUpdate.id, !unitToUpdate.is_available);
      showToast(
        `Unit ${unitToUpdate.unit_number} marked as ${!unitToUpdate.is_available ? 'available' : 'occupied'}`,
        'success'
      );
    } catch (error) {
      showToast('Failed to update unit availability', 'error');
    }
    
    closeConfirmDialog();
  };

  // Handle adding unit
  const handleAddUnit = async (unitData) => {
    try {
      await addUnit(unitData);
      showToast(`Unit ${unitData.unit_number} added successfully`, 'success');
      setAddUnitDialog(false);
      refreshData();
    } catch (error) {
      showToast('Failed to add unit. Please try again.', 'error');
      throw error;
    }
  };

  // Calculate statistics from actual data
  const calculateMetrics = () => {
    const totalUnits = propertyUnits.length;
    const availableUnits = propertyUnits.filter(unit => unit.is_available).length;
    const occupiedUnits = propertyUnits.filter(unit => !unit.is_available).length;
    
    const totalRevenue = propertyUnits
      .filter(unit => !unit.is_available)
      .reduce((sum, unit) => sum + (parseFloat(unit.rent) || 0), 0);
    
    const occupancyRate = totalUnits > 0 ? ((occupiedUnits / totalUnits) * 100).toFixed(0) : 0;

    return {
      totalUnits,
      availableUnits,
      occupiedUnits,
      totalRevenue,
      occupancyRate,
      totalTenants: propertyTenants.length
    };
  };

  const metrics = calculateMetrics();

  // Format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-KE', {
      style: 'currency',
      currency: 'KES',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  if (propertiesLoading || unitsLoading) {
    return (
      <div className="space-y-6">
        <div className="bg-white p-6 rounded-lg shadow animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="bg-white p-6 rounded-lg shadow animate-pulse">
              <div className="h-4 bg-gray-200 rounded mb-2"></div>
              <div className="h-8 bg-gray-200 rounded mb-2"></div>
              <div className="h-3 bg-gray-200 rounded"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <ConfirmationDialog
        isOpen={confirmDialog.isOpen}
        onClose={closeConfirmDialog}
        onConfirm={handleConfirmToggle}
        unit={confirmDialog.unit}
      />

      <AddUnitTypeDialog
        isOpen={unitTypeDialog}
        onClose={() => setUnitTypeDialog(false)}
        onAdd={() => {}} // You'll need to implement this
      />

      <AddUnitDialog
        isOpen={addUnitDialog}
        onClose={() => setAddUnitDialog(false)}
        onAdd={handleAddUnit}
        unitTypes={unitTypes}
        properties={properties}
      />

      {/* Header with Property Selector */}
      <div className="bg-white p-6 rounded-lg shadow">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Property Management</h1>
            <p className="text-gray-600 mt-1">Manage your properties and rental units</p>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3 w-full md:w-auto">
            <select
              value={selectedPropertyId || ''}
              onChange={(e) => setSelectedPropertyId(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white"
            >
              <option value="">All Properties</option>
              {properties.map(property => (
                <option key={property.id} value={property.id}>
                  {property.name} - {property.city}
                </option>
              ))}
            </select>
            
            <NavLink to="/admin/add-property">
              <button className="w-full sm:w-auto bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 flex items-center justify-center gap-2 transition-colors">
                <Plus className="w-5 h-5" />
                Add New Property
              </button>
            </NavLink>
          </div>
        </div>
      </div>

      {/* Property Info Banner */}
      {currentProperty && (
        <div className="bg-blue-50 border-l-4 border-blue-500 p-4 rounded-lg">
          <div className="flex items-start">
            <Building2 className="w-5 h-5 text-blue-600 mr-3 mt-0.5" />
            <div className="flex-1">
              <p className="font-semibold text-blue-900">
                Viewing: {currentProperty.name}
              </p>
              <div className="flex flex-wrap items-center gap-4 mt-1">
                <div className="flex items-center text-sm text-blue-700">
                  <MapPin className="w-4 h-4 mr-1" />
                  {currentProperty.city}, {currentProperty.state}
                </div>
                <div className="flex items-center text-sm text-blue-700">
                  <Home className="w-4 h-4 mr-1" />
                  {currentProperty.unit_count} units total
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Total Tenants</p>
              <p className="text-3xl font-bold text-gray-900">{metrics.totalTenants}</p>
              <p className="text-gray-600 text-sm">Active tenants</p>
            </div>
            <Users className="w-8 h-8 text-blue-500" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Total Units</p>
              <p className="text-3xl font-bold text-gray-900">{metrics.totalUnits}</p>
              <p className="text-gray-600 text-sm">
                {currentProperty ? 'In this property' : 'Across all properties'}
              </p>
            </div>
            <Bed className="w-8 h-8 text-green-500" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Available Units</p>
              <p className="text-3xl font-bold text-gray-900">{metrics.availableUnits}</p>
              <p className="text-gray-600 text-sm">Ready for tenants</p>
            </div>
            <Key className="w-8 h-8 text-yellow-500" />
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-600 text-sm">Occupancy Rate</p>
              <p className="text-3xl font-bold text-gray-900">{metrics.occupancyRate}%</p>
              <p className="text-gray-600 text-sm">{metrics.occupiedUnits}/{metrics.totalUnits} occupied</p>
            </div>
            <DollarSign className="w-8 h-8 text-purple-500" />
          </div>
        </div>
      </div>

      {/* Additional Revenue Card */}
      {metrics.totalRevenue > 0 && (
        <div className="bg-gradient-to-r from-green-500 to-emerald-600 p-6 rounded-lg shadow text-white">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm">Monthly Revenue</p>
              <p className="text-3xl font-bold">{formatCurrency(metrics.totalRevenue)}</p>
              <p className="text-green-100 text-sm">From occupied units</p>
            </div>
            <DollarSign className="w-8 h-8 text-white" />
          </div>
        </div>
      )}

      {/* Unit Types Management */}
      <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">Unit Types</h2>
          <button
            onClick={() => setUnitTypeDialog(true)}
            className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Add Unit Type
          </button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {unitTypes.map(unitType => (
            <div key={unitType.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900">{unitType.name}</h3>
                  <div className="mt-2 space-y-1">
                    <p className="text-lg text-blue-600 font-bold">
                      {formatCurrency(unitType.rent)}/month
                    </p>
                    {unitType.deposit > 0 && (
                      <p className="text-sm text-gray-600">
                        Deposit: {formatCurrency(unitType.deposit)}
                      </p>
                    )}
                  </div>
                </div>
                <button 
                  onClick={() => {/* Implement delete */}}
                  className="text-red-400 hover:text-red-600 transition-colors ml-2"
                  title="Delete unit type"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
          ))}
          
          {unitTypes.length === 0 && (
            <div className="col-span-full text-center py-8 text-gray-500">
              <Bed className="w-12 h-12 mx-auto mb-3 text-gray-300" />
              <p>No unit types defined.</p>
              <p className="text-sm mt-1">Click "Add Unit Type" to create your first unit type.</p>
            </div>
          )}
        </div>
      </div>

      {/* Unit Management Section */}
      <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
        <div className="flex justify-between items-center mb-4">
          <div>
            <h2 className="text-xl font-semibold">Unit Management</h2>
            <p className="text-sm text-gray-500 mt-1">
              {currentProperty 
                ? `Managing units for ${currentProperty.name}`
                : 'Viewing units across all properties'
              }
            </p>
          </div>
          <button
            onClick={() => setAddUnitDialog(true)}
            className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Add Rental Unit
          </button>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b bg-gray-50">
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Unit</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Property</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Type</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Bed/Bath</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Rent (KSh)</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Tenant</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
                <th className="text-left py-3 px-4 font-semibold text-gray-700">Availability</th>
              </tr>
            </thead>
            <tbody>
              {propertyUnits.map(unit => (
                <tr key={unit.id} className="border-b hover:bg-gray-50 transition-colors">
                  <td className="py-3 px-4 font-medium">
                    <div>
                      <div className="font-semibold">{unit.unit_number}</div>
                      {unit.unit_code && (
                        <div className="text-xs text-gray-500">{unit.unit_code}</div>
                      )}
                    </div>
                  </td>
                  <td className="py-3 px-4 text-sm text-gray-600">
                    {unit.property?.name || 'N/A'}
                  </td>
                  <td className="py-3 px-4">
                    {unit.unit_type?.name || 'N/A'}
                  </td>
                  <td className="py-3 px-4 text-sm">
                    {unit.bedrooms || 0} bed / {unit.bathrooms || 0} bath
                    {unit.floor && ` • Floor ${unit.floor}`}
                  </td>
                  <td className="py-3 px-4 font-semibold">
                    {formatCurrency(unit.rent)}
                  </td>
                  <td className="py-3 px-4 text-sm text-gray-600">
                    {unit.tenant ? (
                      <div>
                        <div className="font-medium">{unit.tenant.name}</div>
                        <div className="text-xs">{unit.tenant.email}</div>
                      </div>
                    ) : (
                      '-'
                    )}
                  </td>
                  <td className="py-3 px-4">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      unit.is_available 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-red-100 text-red-800'
                    }`}>
                      {unit.is_available ? 'Available' : 'Occupied'}
                    </span>
                  </td>
                  <td className="py-3 px-4">
                    <button
                      onClick={() => openConfirmDialog(unit)}
                      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
                        unit.is_available ? 'bg-green-500' : 'bg-gray-300'
                      }`}
                      title={`Mark as ${unit.is_available ? 'occupied' : 'available'}`}
                    >
                      <span
                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          unit.is_available ? 'translate-x-6' : 'translate-x-1'
                        }`}
                      />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          
          {propertyUnits.length === 0 && (
            <div className="text-center py-12 text-gray-500">
              <Home className="w-12 h-12 mx-auto mb-3 text-gray-300" />
              <p>No rental units found.</p>
              <p className="text-sm mt-1">
                {currentProperty 
                  ? `Click "Add Rental Unit" to add units to ${currentProperty.name}.`
                  : 'Select a property or add units to get started.'
                }
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Recent Activity */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <AlertTriangle className="w-5 h-5 mr-2 text-orange-500" />
            Recent Reports
          </h3>
          <div className="space-y-3">
            {propertyReports.slice(0, 3).map(report => (
              <div key={report.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border">
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{report.title}</p>
                  <div className="flex items-center text-sm text-gray-600 mt-1">
                    <span>{report.tenant?.name || 'Unknown Tenant'}</span>
                    {report.unit && (
                      <>
                        <span className="mx-2">•</span>
                        <span>Unit {report.unit.unit_number}</span>
                      </>
                    )}
                  </div>
                </div>
                <span className={`px-2 py-1 text-xs rounded-full ${
                  report.priority === 'urgent' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {report.priority}
                </span>
              </div>
            ))}
            
            {propertyReports.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <AlertTriangle className="w-8 h-8 mx-auto mb-2 text-gray-300" />
                <p>No reports found</p>
              </div>
            )}
          </div>
          <NavLink to="/landlord-dashboard/reports">
            <button className="w-full mt-4 px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors">
              View All Reports
            </button>
          </NavLink>
        </div>

        <div className="bg-white p-6 rounded-lg shadow border border-gray-200">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Users className="w-5 h-5 mr-2 text-blue-500" />
            Recent Tenants
          </h3>
          <div className="space-y-3">
            {propertyTenants.slice(0, 3).map(tenant => (
              <div key={tenant.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border">
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{tenant.name}</p>
                  <div className="flex items-center text-sm text-gray-600 mt-1">
                    <span>{tenant.email}</span>
                    {tenant.unit && (
                      <>
                        <span className="mx-2">•</span>
                        <span>Unit {tenant.unit.unit_number}</span>
                      </>
                    )}
                  </div>
                </div>
                <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                  Active
                </span>
              </div>
            ))}
            
            {propertyTenants.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <Users className="w-8 h-8 mx-auto mb-2 text-gray-300" />
                <p>No tenants found</p>
              </div>
            )}
          </div>
          <NavLink to="/landlord-dashboard/tenants">
            <button className="w-full mt-4 px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-900 transition-colors">
              View All Tenants
            </button>
          </NavLink>
        </div>
      </div>
    </div>
  );
};

export default AdminOrganisation;